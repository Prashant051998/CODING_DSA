Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.

##################################################################################################################

code:-
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        set<vector<int>>st;
        
        int size = nums.size();

        for(int i=0;i<size;i++)
        {
            int l = i+1;
            int r = size-1;


            while(l<r)
            {
                int sum = nums[i]+nums[l]+nums[r];
                vector<int> a;

                if(sum == 0)
                {
                    a.push_back(nums[i]);
                    a.push_back(nums[l]);
                    a.push_back(nums[r]);
                    sort(a.begin(),a.end());
                    st.insert(a);
                    l++;
                    r--;
                }

                if(sum <0)
                {
                    l++;
                }

                if(sum >0)
                {
                    r--;
                }
            }
        }

        for(auto i:st)
        {
            ans.push_back(i);
        }

        return ans;
        
    }
};